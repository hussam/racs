# The RACS section configures global options for RACS
[RACS]
# Minimum number of working repositories before we start losing data
k: 2
# Host and port on which to listen for client connections
host: localhost
port: 3129

# "bandwidth" fetches from k repositories for GET requests
# "latency" fetches from all n repositories and takes the first k answers
minimize_latency_or_bandwidth: bandwidth

# Log file for RACS REST accesses
logfile: racs.log

# Comment out to not use ZooKeeper.
# Not using ZooKeeper is unsafe if you're using more than one RACS proxy.
use_zookeeper: True

# Uncomment this to report detailed statistics when RACS exits
# record_stats: True

# Uncomment this to run RACS in unit test mode.  RACS will not run normally; 
# rather, it will subject each of your repositories to a battery of tests.  This 
# is very useful when implementing new kinds of repositories.
#   Note: Does not test for thread safety; you're on your own there.
# unit_test_repositories: True

# ZooKeeper specific options. Not required if you're not using ZooKeeper
[Zookeeper]
host: localhost 
# ZooKeeper defaults to port 2181
port: 2181 	  
# RACS will create ZooKeeper nodes under this root node
root_node: /racs  

# Now you need to configure at least one repository
# Repositories are specified with [Repository NAME] section, where NAME is unique.
# The type of repository is given by the "class" argument.  Each type has different
# options to set, see examples below.
# 
# Current repository classes:
#    S3Repository   --- Amazon S3 
#    RSRepository   --- Rackspace Cloudfiles
#    FSRepository   --- Filesystem (e.g., for network mounted filesystems)

[Repository S3_Repository_Example]
class: S3Repository
s3_access_key_id: YOUR AWS ACCESS KEY HERE
s3_secret_access_key: YOUR AWS SECRET KEY HERE
# This prefix will be prepended to all buckets created by RACS, but not visible to the RACS users.
# For example, a bucket named "foo" on RACS would actually be stored in S3 named racs-foo
s3_bucket_prefix: racs-

[Repository Cloudfiles_Repository_Example]
class: RSRepository
username: racs
api_key: YOUR API KEY HERE
# This prefix will be prepended to all containers created by RACS, but not visible to the RACS users.
# For example, a container named "foo" on RACS would actually be stored in Cloudfiles named racs-foo
container_prefix: racs-

# The filesystem repository simply maps buckets and objects into directories and files.
[Repository FileSystem_Repository_Example]
class: FSRepository
base_directory: PATH TO BASE DIRECTORY
